// Copyright (c) 2017 Recluse Project. All rights reserved.
#include "Win32/Keyboard.hpp"

namespace Recluse {


KeyAction Keyboard::keys[256] = 
{
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, 
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, 
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE,
    KEY_IDLE, KEY_IDLE, KEY_IDLE, KEY_IDLE
};

b32 Keyboard::keyPressed(KeyCode key)
{
  return Keyboard::keys[(i32)key] == KEY_DOWN ? true : false;
}


b32 Keyboard::keyReleased(KeyCode key)
{
  return Keyboard::keys[(i32)key] == KEY_UP ? true : false;
}


b32 Keyboard::keyHeldDown(KeyCode key) 
{
  return Keyboard::keys[(i32)key] == KEY_STILLDOWN ? true : false;
}


void Keyboard::preUpdate()
{
  for (u32 i = 0; i < 256; ++i) 
  {
    if (keys[ i ] == KEY_UP) 
    {
      keys[ i ] = KEY_IDLE;
    }
    if (keys [ i ] == KEY_DOWN)
    {
      keys[ i ] = KEY_STILLDOWN;
    }
  }
}
} // Recluse