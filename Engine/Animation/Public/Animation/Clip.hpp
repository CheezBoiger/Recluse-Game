// Copyright (c) 2018 Recluse Project. All rights reserved.
#pragma once

#include "Core/Types.hpp"
#include "Core/Math/Quaternion.hpp"
#include "Core/Math/Matrix3.hpp"
#include "Core/Math/Matrix4.hpp"

#include <vector>

#include "Skeleton.hpp"


namespace Recluse {


// The joint pose that represents current position and orientation
// of a joint at a specified key frame. This is in SQT format.
struct JointPose {
  Quaternion  _rot;   // rotation.
  Vector3     _trans; // translation.
  Vector3     _scale; // scale.
  DEBUG_OP(u8          _id);     // node id sample.
};


// A Sample of an animation at some certain key frame. This corresponds to 
// the AnimClip states.
struct AnimPose {
  std::vector<JointPose>  _aLocalPoses;       // local pose matrices.
  std::vector<Matrix4>    _aGlobalPoses;      // global pose matrices.
  r32                     _time;              // key frame time within the animation.
};


// Single instance of an animation clip. This may represent a "walk," "run,", "shoot," etc...
struct AnimClip {
  // Duration of this animation clip.
  r32                           _fDuration;           // Duration of clip T.
  r32                           _fFps;                // frames per second time.
  u32                           _uFrameCount;         // Number of frames this clip occupies.
  skeleton_uuid_t               _skeletonId;          // id of skeleton that this clip works with.
  std::vector<AnimPose>         _aAnimPoseSamples;    //
  b32                           _bLooping;            //
  std::string                   _name;                // name of this clip.
};


// Animation clip state. Keeps track of the state of an animation's clip.
struct AnimClipState {
  r32                         _fCurrLocalTime;  // Local clock t. Runs until AnimClip._rDuration.
                                                // range : [0, AnimClip._rDuration]
  r32                         _fWeight;
  r32                         _fPlaybackRate;   // rate at which to play back animation.
  b32                         _bEnabled;        // allow enabling this animation clip.
  b32                         _bLooping;        // loop this state.
};


// Sampler class generated by the animation engine to perform the sampling job, and 
// matrix palette generation, for the given animation clip.
class AnimSampler {
public:
  AnimSampler();

  // Step into animation and sample from given animation clip. must provide the 
  // given current global time as opposed to the delta time.
  void                      Step(r32 gt);

  // Get the output of this sampler.
  std::vector<Matrix4>&     GetOutput() { return _output; }

  r32                       GetLocalTime() { return _state._fCurrLocalTime; }

  void                      SetClip(AnimClip* clip) { _pClip = clip; ReadClip(); }

  // Get this sampler's clip state.
  AnimClipState*            GetClipState() { return &_state; }

  // Play the clip sampling, provides the global start time for the sampler to begin
  // sampling.
  void                      Play(r32 gt) { _tauS = gt; ResetLocal(); }

  b32                       Enabled() const { return _state._bEnabled; }
private:

  void                      ResetLocal() { _state._fCurrLocalTime = 0.0f; }
  Matrix4                   Interpolate(r32 t, size_t i);
  void                      ApplyCurrentPose(Skeleton& skeleton);
  
  void                      ReadClip();

  AnimClipState             _state;           // 
  AnimClip*                 _pClip;           // Animation clip we are sampling from.
  std::vector<Matrix4>      _output;          // Matrix palette output during sampling. 
  r32                       _tauS;            // global start time given when play is called.
  size_t                    _currPoseIdx;     // 
  size_t                    _nextPoseIdx;     //
  Matrix4                   _globalTransform; // root animation global bind. Pertains to its global transformation.
};


// Animation clips should transition between pose samples, using the equation:
//
//    
} // Recluse