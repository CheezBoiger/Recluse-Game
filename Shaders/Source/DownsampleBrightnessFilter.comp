// Copyright (c) 2019 Recluse Project. All rights reserved.
#version 430
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_compute_shader : enable
#extension GL_GOOGLE_include_directive : enable

#define NO_NORMAL_TANGENT
#include "Common/Globals.glsl"

layout (set = 0, binding = 0) uniform sampler2D hiRes;
layout (set = 0, binding = 1, rgba16) uniform image2D loRes;

// Size of lo res texture
layout (push_constant) uniform PushConst {
  vec4 invOutputSz;
  vec4 bloomThreshold;
} screen;


// Implemented from Jason Stanard's algorithms. Credits to MiniEngine:
// https://github.com/microsoft/DirectX-Graphics-Samples/blob/master/MiniEngine/Core/Shaders/BloomExtractAndDownsampleLdrCS.hlsl
float ColorRGBtoLuma(vec3 c)
{
  return dot(c, vec3(0.212671, 0.715160, 0.072169));
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
  vec2 offset = screen.invOutputSz.xy * 0.25; 
  ivec2 iPixCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  // Inverting to get one pixel sz.
  vec2 tx = (vec2(iPixCoord) + 0.5) * screen.invOutputSz.xy;
  
  vec3 c0 = texture(hiRes, tx + vec2(-offset.x, -offset.y)).rgb;
  vec3 c1 = texture(hiRes, tx + vec2( offset.x, -offset.y)).rgb;
  vec3 c2 = texture(hiRes, tx + vec2(-offset.x,  offset.y)).rgb;
  vec3 c3 = texture(hiRes, tx + vec2( offset.x,  offset.y)).rgb;
  
  const float kEpsilon = 0.0001;
  float threshold = screen.bloomThreshold.x;
  
  float luma0 = ColorRGBtoLuma(c0);
  float luma1 = ColorRGBtoLuma(c1);
  float luma2 = ColorRGBtoLuma(c2);
  float luma3 = ColorRGBtoLuma(c3);
  
  // Apply bloom strength threshold. 
  c0 *= max(kEpsilon, luma0 - threshold) / (luma0 + kEpsilon);
  c1 *= max(kEpsilon, luma1 - threshold) / (luma1 + kEpsilon);
  c2 *= max(kEpsilon, luma2 - threshold) / (luma2 + kEpsilon);
  c3 *= max(kEpsilon, luma3 - threshold) / (luma3 + kEpsilon);
  
  const float kShimmerInvStr = 1.0;
  float w0 = 1.0 / (luma0 + kShimmerInvStr);
  float w1 = 1.0 / (luma1 + kShimmerInvStr);
  float w2 = 1.0 / (luma2 + kShimmerInvStr);
  float w3 = 1.0 / (luma3 + kShimmerInvStr);
  float wSum = w0 + w1 + w2 + w3;
  
  vec3 o = (c0 * w0 + c1 * w1 + c2 * w2 + c3 * w3) / wSum;
  vec4 res = vec4(o.rgb, 1.0);
  
  imageStore(loRes, iPixCoord, res);
}