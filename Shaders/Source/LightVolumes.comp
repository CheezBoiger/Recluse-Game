// Copyright (c) 2018 Recluse Project. All rights reserved.
#version 430
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_compute_shader : enable
#extension GL_GOOGLE_include_directive : enable

#define NO_NORMAL_TANGENT
#include "Common/Globals.glsl"
#include "Common/LightingPBR.glsl"

#define MAX_MARCHING_SAMPLES 64

layout (set = 0, binding = 0) uniform Globals {
  GlobalBuffer global;
} gWorldBuffer;

// Scene depth to reconstruct the world position.
layout (set = 1, binding = 0) uniform sampler2D depth;

// Output texture.
layout (set = 2, binding = 0, rgba8) uniform image2D outputTex;

layout (set = 3, binding = 0) uniform Lights {
  LightBuffer lights;
} gLightBuffer;


vec4 getPosition(vec2 uv, float depth)
{

  vec4 clipPos = vec4(uv.xy, depth, 1.0);
  vec4 worldPos = gWorldBuffer.global.invViewProj * clipPos;
  worldPos /= worldPos.w;
  return vec4(worldPos.xyz, 1.0);
}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
  ivec2 iPixCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  vec4 color = imageLoad(outputTex, iPixCoord);
  vec2 texCoord = vec2(  float(iPixCoord.x) / float(gWorldBuffer.global.screenSize.x), 
                         float(iPixCoord.y) / float(gWorldBuffer.global.screenSize.y)) * 2 - 1;
  float sceneDepth = texture(depth, texCoord).r;
  
  // reconstruct the world position
  vec4 positionWs = getPosition(texCoord, sceneDepth);
  
  vec4 resultColor = vec4(0.0);
  // perform comparing.
  vec4 lightDir = -gLightBuffer.lights.primaryLight.direction;
  float extent = 0;
  for (int i = 0; i < MAX_MARCHING_SAMPLES; ++i) {
	vec4 p = positionWs + lightDir * extent;
	
  }
  
  // Store the final resulting color.
  imageStore(outputTex, iPixCoord, resultColor);
}





