// Copyright (c) 2017 Recluse Project. All rights reserved.
#version 430
#extension GL_ARB_separate_shader_objects   : enable
#extension GL_ARB_shading_language_420pack  : enable
#extension GL_ARB_compute_shader            : enable
#extension GL_GOOGLE_include_directive : enable

#define NO_NORMAL_TANGENT 1
#include "Common/Globals.glsl"
#include "Common/LightingPBR.glsl"
#include "Common/Clustering.glsl"

struct DecalInfo {
  vec4  min;      // 3d min bounds size.
  vec4  max;      // 3d max bounds size.
  vec4  scale;
};

#define WORKGROUP_SIZE        16
#define MAX_DECALS_SIZE       64

layout (set = 0, binding = 0) uniform Globals {
  GlobalBuffer global;
} gWorldBuffer;

// Depth and render target information.
layout (set = 1, binding = 0) uniform sampler2D inDepth;

layout (set = 2, binding = 0) buffer ClusterList {
  ivec2            data[];
} clusterList;


layout (set = 2, binding = 0) buffer ClusterAABBs {
  Cluster grid[];
} clusterAABB;

// indices contain key sources [ light idx | decal idx | probe idx ]. These indices correspond to buffers containing the idx key
// to that source.
// buffer containing the light index offset, and a list of light data indices that correspond to that cluster (3D array).
layout (set = 2, binding = 1) buffer LightList {
  uint     count;
  uint     globalIndex;
  ivec2    pad0;
  ivec4    keys[];
} lightList;


// clusters contain [ offset (32b) | light count (8b) | decal count (8b) | probe count (8b) ].
// offset determines the offset when reading the indices buffer, where as the counts determine the overall size of the 
// sublist after offsetting the indices list, to read off of.
// Computing the size of the this data must be a size of (GRID_X * GRID_Y * GRID_Z) * 64bits, with count = (GRID_X * GRID_Y * GRID_Z).
// TODO(): Would this make sense to make it a texture?
layout (set = 2, binding = 2) buffer LightGrid {
  vec4 count;
  LightGridData grid[];
} lightGrid;


layout (set = 2, binding = 3) buffer LightBVHInfo {
  LightBVH bvh;
} lightBVH;


// Light data.
layout (set = 3, binding = 0) buffer Lights {
  LightBuffer lights;
} gLightBuffer;

layout (set = 3, binding = 0) uniform DecalBuffer {
  DecalInfo       decals[MAX_DECALS_SIZE];
} gDecalBuffer;


shared uint gs_clusterIndex1D;
shared AABB gs_clusterAABB; 

shared uint gs_pointLightOffset;
shared uint gs_spotLightOffset;
shared uint gs_pointLightIndices[MAX_POINT_LIGHTS];
shared uint gs_spotLightIndices[MAX_SPOT_LIGHTS];


layout (local_size_x = 16, local_size_y = 8, local_size_z = 24) in;
void main()
{
  uint threadCount = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
  uint spotLightCount = MAX_SPOT_LIGHTS;
  uint pointLightCount = MAX_POINT_LIGHTS;
  
  uint currClusterIdx = gl_LocalInvocationIndex + threadCount * gl_WorkGroupID.z;

  
}