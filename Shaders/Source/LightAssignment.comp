// Copyright (c) 2017 Recluse Project. All rights reserved.
#version 430
#extension GL_ARB_separate_shader_objects   : enable
#extension GL_ARB_shading_language_420pack  : enable
#extension GL_ARB_compute_shader            : enable
#extension GL_GOOGLE_include_directive : enable

#define NO_NORMAL_TANGENT 1
#include "Common/Globals.glsl"
#include "Common/LightingPBR.glsl"
#include "Common/Clustering.glsl"

struct DecalInfo {
  vec4  min;      // 3d min bounds size.
  vec4  max;      // 3d max bounds size.
  vec4  scale;
};

#define WORKGROUP_SIZE        16
#define MAX_DECALS_SIZE       64

layout (set = 0, binding = 0) uniform Globals {
  GlobalBuffer global;
} gWorldBuffer;

// Depth and render target information.
layout (set = 1, binding = 0) uniform sampler2D inRt0;
layout (set = 1, binding = 1) uniform sampler2D inRt1;
layout (set = 1, binding = 2) uniform sampler2D inRt2;
layout (set = 1, binding = 3) uniform sampler2D inRt3;
layout (set = 1, binding = 4) uniform sampler2D inDepth;


// buffer containing the light index offset, and a list of light data indices that correspond to that cluster (3D array).
// clusters contain [ offset (32b) | light count (8b) | decal count (8b) | probe count (8b) ].
// offset determines the offset when reading the indices buffer, where as the counts determine the overall size of the 
// sublist after offsetting the indices list, to read off of.
// Computing the size of the this data must be a size of (GRID_X * GRID_Y * GRID_Z) * 64bits, with count = (GRID_X * GRID_Y * GRID_Z).
// TODO(): Would this make sense to make it a texture?
layout (set = 2, binding = 0) buffer Cluster {
  uint            ids[];
} clusterId;


layout (set = 2, binding = 1) buffer ClusterAABB {
  AABB aabbs[];
} clusterAABB;

// indices contain key sources [ light idx | decal idx | probe idx ]. These indices correspond to buffers containing the idx key
// to that source.
layout (set = 2, binding = 2) buffer indices {
  ivec4     count;
  uint      indices[];
} lightIndices;


layout (set = 2, binding = 3) buffer LightGrid {
  vec4            count;
  GridData     grid[];
} lightGrid;


layout (set = 2, binding = 4) buffer LightBVHInfo {
  LightBVH bvh;
} lightBVH;


// Light data.
layout (set = 3, binding = 0) uniform Lights {
  LightBuffer lights;
} gLightBuffer;

layout (set = 3, binding = 0) uniform DecalBuffer {
  DecalInfo       decals[MAX_DECALS_SIZE];
} gDecalBuffer;


shared uint gs_clusterIndex1D;
shared AABB gs_clusterAABB; 

shared uint gs_pointLightCount;
shared uint gs_spotLightCount;
shared uint gs_pointLightOffset;
shared uint gs_spotLightOffset;
shared uint gs_pointLightIndices[MAX_POINT_LIGHTS];
shared uint gs_spotLightIndices[MAX_SPOT_LIGHTS];


layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
  if (gl_LocalInvocationIndex == 0) 
  {
    gs_pointLightCount = 0;
    gs_spotLightCount = 0;
    
    gs_clusterIndex1D = clusterId.ids[gl_WorkGroupID.x];
    gs_clusterAABB = clusterAABB.aabbs[gs_clusterIndex1D];
  }
  
  memoryBarrier();
  
  // Clear buffers if no lights exist.
  uint cc = uint(lightGrid.count.x);
  
  for (uint i = 0; (gl_GlobalInvocationID.x + i) < cc; i+=WORKGROUP_SIZE) 
  {
    uint idx = gl_GlobalInvocationID.x + i;
    PointLight pointlight = gLightBuffer.lights.pointLights[i];
    Sphere sphere = { pointlight.position.xyz, pointlight.range };
    if (sphereInAABB(sphere, gs_clusterAABB) == 1) 
    {
     
      lightGrid.grid[idx].param = ivec2(0);
    }
  }
  
  memoryBarrier();
  
  cc = uint(lightIndices.count.x);
  
  for (uint i = 0; (gl_GlobalInvocationID.x + i) < cc; i+=WORKGROUP_SIZE) 
  {
    uint idx = gl_GlobalInvocationID.x + i;
    lightIndices.indices[idx];
  }
}