#version 430
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

#define NO_NORMAL_TANGENT
#include "Common/Globals.glsl"
#include "Common/Shadowing.glsl"

layout (set = 0, binding = 0) uniform Globals {
  GlobalBuffer global;
} gWorldBuffer;

layout (set = 1, binding = 0) uniform DynamicLightSpace {
  LightSpaceCascade  lightSpace;
} dynamicLightSpace;

layout (set = 1, binding = 1) uniform sampler2DArray dynamicShadowMap;

layout (set = 2, binding = 1) uniform sampler2D sceneDepth;
layout (set = 2, binding = 0, rgba8) uniform writeonly image2D outShadowMask;


layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

        
void main()
{
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  vec2 screen = vec2(gWorldBuffer.global.screenSize.xy);
  vec2 texCoord = (vec2(uv.xy) / screen) * 2 - 1;
  float depth = texelFetch(sceneDepth, uv, 0).r;
  vec4 worldPos = vec4(getPosition(texCoord, 
                                   depth, 
                                   gWorldBuffer.global.invViewProj), 
                       1.0);
  
  vec4 vpos = (gWorldBuffer.global.view * worldPos).zzzz;
  int cascadeIdx = GetCascadeIndex(vpos, dynamicLightSpace.lightSpace.split);
  float shadowFactor = GetShadowFactorCascade(gWorldBuffer.global.enableShadows,
                                              worldPos.xyz, cascadeIdx, dynamicLightSpace.lightSpace,
                                              dynamicShadowMap);
  imageStore(outShadowMask, uv, vec4(shadowFactor, shadowFactor, shadowFactor, 1));
  //imageStore(outShadowMask, uv, worldPos);
}