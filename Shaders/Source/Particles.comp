// Copyright (c) 2018 Recluse Project. All rights reserved.
#version 430
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_compute_shader : enable


// Global const buffer ALWAYS bound to descriptor set 0, or the 
// first descriptor set.
layout (set = 0, binding = 0) uniform GlobalBuffer {
  mat4  view;
  mat4  proj;
  mat4  invView;
  mat4  invProj;
  mat4  viewProj;
  mat4  invViewProj;
  vec4  cameraPos;
  vec4  l_plane;
  vec4  r_plane;
  vec4  t_plane;
  vec4  b_plane;
  vec4  n_plane;
  vec4  f_plane;
  vec2  mousePos;
  ivec2 screenSize;
  vec4  vSun; // Sundir.xyz and w is brightness.
  vec4  vAirColor;
  float fEngineTime; // total current time of the engine. 
  float fDeltaTime; // elapsed time between frames.
  float gamma;
  float exposure;
  float fRayleigh;
  float fMie;
  float fMieDist;
  float fScatterStrength;
  float fRayleighStength;
  float fMieStength;
  float fIntensity;
  int   bloomEnabled;
  int   enableShadows;
  int   enableAA;
  ivec2 pad;
} gWorldBuffer;


// The particle and it's information.
struct Particle {
  vec4    position;
  vec4    velocity;
  vec4    color;
  float   size;
  float   angle;
  float   weight;
  float   life;
};


layout (set = 1, binding = 0) buffer ParticleBuffer {
  vec4      bufferSz;
  Particle  particles[ ];
} particleBuffer;


layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
  float bufferSz = particleBuffer.bufferSz.x;
  for (int i = 0; (gl_GlobalInvocationID.x + i) < bufferSz; i += 256) {
    uint idx = gl_GlobalInvocationID.x + i;
    Particle p = particleBuffer.particles[idx];
    if (p.life > 0.0) {
      p.life.x -= gWorldBuffer.fDeltaTime;
      if (p.life > 0.0) {
        // Update the particle as it is still alive.
        p.position += p.velocity * gWorldBuffer.fDeltaTime;
      }
    }
  }
}



