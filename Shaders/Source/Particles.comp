// Copyright (c) 2018 Recluse Project. All rights reserved.
#version 430
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_compute_shader : enable
#extension GL_GOOGLE_include_directive : enable

#include "Common/Globals.glsl"


// The particle and it's information.
struct Particle {
  vec4    position;
  vec4    offsetPos;
  vec4    velocity;
  vec4    initVelocity;
  vec4    acceleration;
  vec4    color;
  vec4    particleInfo; // x = angle, y = size, z = weight, w = life.
  vec4    camDist;
};

layout (set = 0, binding = 0) uniform Globals {
  GlobalBuffer global;
} gWorldBuffer;


layout (set = 1, binding = 0) uniform ParticleConfig {
  mat4  model;
  mat4  modelView;
  vec4  hasTexture;
  vec4  globalScale;
  vec4  lightFactor;
  vec4  angleRate;
  vec4  fadeIn;
  vec4  animScale;
  float fadeAt;
  float fadeThreshold;
  float angleThreshold;
  float rate;
  float lifeTimeScale;
  float particleMaxAlive;
  float maxParticles;
  float isWorldSpace;
  int   bIsTimeScaled;
  ivec3 pad0;
} particleConfig;


layout (set = 1, binding = 2) buffer ParticleBuffer {
  Particle  particles[ ];
} particleBuffer;

shared float fDt;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
  float bufferSz = particleConfig.maxParticles;

  if (gl_LocalInvocationIndex == 0) {
    fDt = gWorldBuffer.global.fDeltaTime;
    if (particleConfig.bIsTimeScaled >= 1) {  
      fDt *= gWorldBuffer.global.fScaleTime;
    }
  }
  
  barrier();
  
  for (int i = 0; (gl_GlobalInvocationID.x + i) < bufferSz; i += 256) {
    uint idx = gl_GlobalInvocationID.x + i;
    Particle p = particleBuffer.particles[idx];
    if (p.particleInfo.w >= 0.0) {
      p.particleInfo.w -= fDt * particleConfig.rate;
      if (p.particleInfo.w > 0.0) {
        // Update the particle as it is still alive.
        p.velocity += fDt * p.acceleration;
        p.position += p.velocity * fDt;
      } else {
        // reset.
        mat4 model = particleConfig.model;
        p.particleInfo.w = particleConfig.particleMaxAlive * particleConfig.lifeTimeScale;
        p.velocity = p.initVelocity;
        p.position = vec4(model[3][0], model[3][1], model[3][2], model[3][3]) + p.offsetPos;
      }
    }
    
    float camLength = length(p.position.xyz - gWorldBuffer.global.cameraPos.xyz); 
    p.camDist.xyzw = vec4(camLength, camLength, camLength, camLength);
    p.particleInfo.x += fDt * particleConfig.angleRate.x; 
    particleBuffer.particles[idx] = p;
  }
}



