#version 430
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_compute_shader : enable

#define MAX_DIRECTION_LIGHTS    4
#define MAX_POINT_LIGHTS        64

struct DirectionLight {
  vec4  direction;
  vec4  ambient;
  vec4  color;
  float intensity;
  int   enable;
  ivec2 pad;
};


struct PointLight {
  vec4    position;
  vec4    color;
  float   range;
  float   intensity;
  int     enable;
  int     pad;
};

// Global const buffer ALWAYS bound to descriptor set 0, or the 
// first descriptor set.
layout (set = 0, binding = 0) uniform GlobalBuffer {
  mat4  view;
  mat4  proj;
  mat4  invView;
  mat4  invProj;
  mat4  viewProj;
  mat4  invViewProj;
  vec4  cameraPos;
  vec4  l_plane;
  vec4  r_plane;
  vec4  t_plane;
  vec4  b_plane;
  vec4  n_plane;
  vec4  f_plane;
  vec2  mousePos;
  ivec2 screenSize;
  vec4  vSun; // Sundir.xyz and w is brightness.
  vec4  vAirColor;
  float fEngineTime; // total current time of the engine. 
  float fDeltaTime; // elapsed time between frames.
  float gamma;
  float exposure;
  float fRayleigh;
  float fMie;
  float fMieDist;
  float fScatterStrength;
  float fRayleighStength;
  float fMieStength;
  float fIntensity;
  int   bloomEnabled;
  int   enableShadows;
  int   enableAA;
  ivec2 pad;
} gWorldBuffer;

layout (set = 1, binding = 0) uniform sampler2D inRt0;
layout (set = 1, binding = 1) uniform sampler2D inRt1;
layout (set = 1, binding = 2) uniform sampler2D inRt2;
layout (set = 1, binding = 3) uniform sampler2D inRt3;
layout (set = 1, binding = 4) uniform sampler2D inDepth;

layout (set = 2, binding = 0) uniform LightBuffer {
  DirectionLight  primaryLight;
  DirectionLight  directionLights[MAX_DIRECTION_LIGHTS];
  PointLight      pointLights[MAX_POINT_LIGHTS];
} gLightBuffer;

layout (set = 2, binding = 1) uniform sampler2D globalShadow;

layout (set = 3, binding = 0) uniform LightSpace {
  mat4 viewProj;
} lightSpace;

layout (set = 4, binding = 0) uniform samplerCube diffMap;
layout (set = 4, binding = 1) uniform samplerCube specMap;
layout (set = 4, binding = 2) uniform sampler2D brdfLut;
#if defined(LOCAL_REFLECTIONS)
layout (set = 4, binding = 3) uniform samplerCubeArray diffMaps;   // Current set irradiance map.
layout (set = 4, binding = 4) uniform samplerCubeArray specMaps;   // Current set enviroment map (radiance).
layout (set = 4, binding = 5) uniform sampler2DArray brdfLuts;    // BRDF lookup tables corresponding to each env map.
#endif

layout (set = 5, binding = 0, rgba8) uniform writeonly image2D outResult;
layout (set = 5, binding = 1, rgba16) uniform writeonly image2D outBright; 

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  vec2 texCoord = vec2(uv.xy / gWorldBuffer.screenSize.xy);
  
  vec4 color = texture(inRt0, texCoord);
  imageStore(outResult, uv, color);
  imageStore(outBright, uv, vec4(0.0));
}