// Copyright (c) 2017 Recluse Project. All rights reserved.
#version 430
#extension GL_ARB_separate_shader_objects   : enable
#extension GL_ARB_shading_language_420pack  : enable
#extension GL_ARB_compute_shader            : enable

struct DirectionLight {
  vec4  direction;
  vec4  ambient;
  vec4  color;
  float intensity;
  int   enable;
  ivec2 pad;
};

struct PointLight {
  vec4    position;
  vec4    color;
  float   range;
  float   intensity;
  int     enable;
  int     pad;
};


struct DecalInfo {
  vec4  min;      // 3d min bounds size.
  vec4  max;      // 3d max bounds size.
  vec4  scale;
};


#define WORKGROUP_SIZE        16
#define MAX_POINT_LIGHTS      64
#define MAX_DIRECTION_LIGHTS  8
#define MAX_DECALS_SIZE       64


// Global const buffer ALWAYS bound to descriptor set 0, or the 
// first descriptor set.
layout (set = 0, binding = 0) uniform GlobalBuffer {
  mat4  view;
  mat4  proj;
  mat4  invView;
  mat4  invProj;
  mat4  viewProj;
  mat4  invViewProj;
  vec4  cameraPos;
  vec4  l_plane;
  vec4  r_plane;
  vec4  t_plane;
  vec4  b_plane;
  vec4  n_plane;
  vec4  f_plane;
  vec4  clipPlane0;
  vec2  mousePos;
  ivec2 screenSize;
  vec4  vSun; // Sundir.xyz and w is brightness.
  vec4  vAirColor;
  float fEngineTime; // total current time of the engine. 
  float fDeltaTime; // elapsed time between frames.
  float gamma;
  float exposure;
  float fRayleigh;
  float fMie;
  float fMieDist;
  float fScatterStrength;
  float fRayleighStength;
  float fMieStength;
  float fIntensity;
  float zNear;
  float zFar;
  int   bloomEnabled;
  int   enableShadows;
  int   enableAA;
} gWorldBuffer;

// Depth and render target information.
layout (set = 1, binding = 0) uniform sampler2D inRt0;
layout (set = 1, binding = 1) uniform sampler2D inRt1;
layout (set = 1, binding = 2) uniform sampler2D inRt2;
layout (set = 1, binding = 3) uniform sampler2D inRt3;
layout (set = 1, binding = 4) uniform sampler2D inDepth;


struct ClusterData {
  ivec2  param; // [ offset (32) | light count (8) | decal count (8) | probe count (8) ]
};

struct ClusterIndex {
  uint index;
};

// buffer containing the light index offset, and a list of light data indices that correspond to that cluster.
// clusters contain [ offset (32b) | light count (8b) | decal count (8b) | probe count (8b) ].
// offset determines the offset when reading the indices buffer, where as the counts determine the overall size of the 
// sublist after offsetting the indices list, to read off of.
layout (set = 2, binding = 0) writeonly buffer Cluster {
  ClusterData     clusterPointers[];
};

// indices contain key sources [ light idx | decal idx | probe idx ]. These indices correspond to buffers containing the idx key
// to that source.
layout (set = 2, binding = 1) writeonly buffer indices {
  ClusterIndex      clusterIndices[];
};

// Light data.
layout (set = 3, binding = 0) uniform LightBuffer {
  DirectionLight  primaryLight;
  DirectionLight  directionLights[MAX_DIRECTION_LIGHTS];
  PointLight      pointLights[MAX_POINT_LIGHTS];
} gLightBuffer;

layout (set = 3, binding = 0) uniform DecalBuffer {
  DecalInfo       decals[MAX_DECALS_SIZE];
} gDecalBuffer;

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;
void main()
{
  ivec2 imgUv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  vec2 uv = (vec2(imgUv) + 0.5) / vec2(gWorldBuffer.screenSize);
  float depth = texture(inDepth, uv).r;
  
  
}